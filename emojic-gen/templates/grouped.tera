// Code generated by github.com/orhanbalci/emojic/emojic-gen DO NOT EDIT.

// Source: {{ Link }}
// Created at: {{ Date }}

#![allow(unused_imports)]

//! Grouped list of all emojis with sub modules.
//!
//! This module contains the same set of emojis as the [`crate::flat`] module, but
//! categorized into their respective groups and subgroups via sub modules.
//! This make it easier to browse all the emojis in an intelligible way.
//!
//! # Examples
//!
//! ```rust
//! // prints: 🖼️
//! println!("{}", emojic::grouped::activities::arts_and_crafts::FRAMED_PICTURE);
//! ```

use crate::emojis::Emoji;


{% for grp in Constants %}
/// {{ grp.identifier }} {{ grp.preview_emojis }}
pub mod {{ grp.identifier }} {
	use crate::emojis::Emoji;

	{% for sub in grp.subgroups %}
	/// {{ sub.identifier }} {{ sub.preview_emojis }}
	pub mod {{ sub.identifier }} {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		{% for emoji in sub.emojis %}
		{{ emoji.source_code }}
		{% endfor %}


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			{% for emoji in sub.emojis %}
			&[ // {{ emoji.identifier }}
				{% for acc in emoji.full_list_accessors %}
				&{{ acc }},
				{% endfor %}
			],
			{% endfor %}
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			{% for emoji in sub.emojis %}
				{% for acc in emoji.default_list_accessors %}
				&{{ acc }}, // {{ emoji.identifier }}
				{% endfor %}
			{% endfor %}
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // {{ sub.identifier }}
	{% endfor %}


	// Emoji iterators

	/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
	pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
		core::iter::empty()
		{% for sub in grp.subgroups %}
			.chain({{ sub.identifier }}::all_variants())
		{% endfor %}
	}

	/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
	pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
		core::iter::empty()
		{% for sub in grp.subgroups %}
			.chain({{ sub.identifier }}::base_emojis())
		{% endfor %}
	}

} // {{ grp.identifier }}
{% endfor %}


// Emoji iterators

/// Returns an iterator over all emoji variants of all groups together grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
	core::iter::empty()
	{% for grp in Constants %}
		.chain({{ grp.identifier }}::all_variants())
	{% endfor %}
}

/// Returns an iterator over all base emojis of all groups together (i.e. one for each static)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
	core::iter::empty()
	{% for grp in Constants %}
		.chain({{ grp.identifier }}::base_emojis())
	{% endfor %}
}

// EOF